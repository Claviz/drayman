"use strict";(self.webpackChunk_drayman_docs=self.webpackChunk_drayman_docs||[]).push([[8682],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),c=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(o,".").concat(m)]||u[m]||p[m]||r;return t?i.createElement(f,l(l({ref:n},d),{},{components:t})):i.createElement(f,l({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9307:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),l=["components"],s={title:"PostCSS and Tailwind CSS",sidebar_position:4},o=void 0,c={unversionedId:"postcss-and-tailwind-css",id:"postcss-and-tailwind-css",isDocsHomePage:!1,title:"PostCSS and Tailwind CSS",description:"If there is a PostCSS config somewhere (found by postcss-load-config), Drayman will automatically set it up.",source:"@site/docs/postcss-and-tailwind-css.mdx",sourceDirName:".",slug:"/postcss-and-tailwind-css",permalink:"/docs/postcss-and-tailwind-css",editUrl:"https://github.com/Claviz/drayman/blob/main/docs/docs/postcss-and-tailwind-css.mdx",version:"current",sidebarPosition:4,frontMatter:{title:"PostCSS and Tailwind CSS",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"@drayman/elements",permalink:"/docs/web-components/drayman-elements"}},d=[{value:"Install Tailwind CSS",id:"install-tailwind-css",children:[{value:"Install <code>autoprefixer</code> and <code>tailwindcss</code>",id:"install-autoprefixer-and-tailwindcss",children:[]},{value:"Create config files",id:"create-config-files",children:[]},{value:"Modify <code>tailwind.config.js</code> file",id:"modify-tailwindconfigjs-file",children:[]},{value:"Include Tailwind in your CSS",id:"include-tailwind-in-your-css",children:[]}]}],p={toc:d};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If there is a PostCSS config somewhere (found by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/postcss/postcss-load-config"},"postcss-load-config"),"), Drayman will automatically set it up."),(0,r.kt)("p",null,"By default a ",(0,r.kt)("inlineCode",{parentName:"p"},"src/styles.css")," file will be passed to PostCSS as a source and ",(0,r.kt)("inlineCode",{parentName:"p"},"public/styles.css")," file as an output. This behavior can be changed with ",(0,r.kt)("inlineCode",{parentName:"p"},"postcss")," option inside ",(0,r.kt)("a",{parentName:"p",href:"introduction/configuration"},"Drayman configuration file"),"."),(0,r.kt)("h2",{id:"install-tailwind-css"},"Install Tailwind CSS"),(0,r.kt)("p",null,"It is possible to use Tailwind CSS because Drayman supports PostCSS out of the box. You just need to follow few steps to make it work."),(0,r.kt)("h3",{id:"install-autoprefixer-and-tailwindcss"},"Install ",(0,r.kt)("inlineCode",{parentName:"h3"},"autoprefixer")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"tailwindcss")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D tailwindcss@latest autoprefixer@latest\n")),(0,r.kt)("h3",{id:"create-config-files"},"Create config files"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx tailwindcss init -p\n")),(0,r.kt)("p",null,"This command will generate ",(0,r.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"postcss.config.js")," files."),(0,r.kt)("h3",{id:"modify-tailwindconfigjs-file"},"Modify ",(0,r.kt)("inlineCode",{parentName:"h3"},"tailwind.config.js")," file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},'module.exports = {\n  purge: [\n    // highlight-next-line\n    "./src/**/*.tsx",\n  ],\n  darkMode: false,\n  theme: {\n    extend: {},\n  },\n  variants: {\n    extend: {},\n  },\n  plugins: [],\n};\n')),(0,r.kt)("h3",{id:"include-tailwind-in-your-css"},"Include Tailwind in your CSS"),(0,r.kt)("p",null,"Open your main CSS file (by default Drayman will check ",(0,r.kt)("inlineCode",{parentName:"p"},"src/styles.css"),") and append this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/styles.css"',title:'"src/styles.css"'},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")),(0,r.kt)("p",null,"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"public/index.html")," file to include generated CSS file (by default Drayman generates it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"public/styles.css")," file):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="public/index.html"',title:'"public/index.html"'},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <title>Drayman Framework</title>\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <script src="/drayman-framework-client.js"><\/script>\n    \x3c!-- highlight-next-line --\x3e\n    <link rel="stylesheet" href="styles.css" />\n  </head>\n\n  <body>\n    <drayman-element component="home"></drayman-element>\n\n    <script>\n      initializeDraymanFramework();\n    <\/script>\n  </body>\n</html>\n')))}u.isMDXComponent=!0}}]);