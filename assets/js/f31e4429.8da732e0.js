"use strict";(self.webpackChunk_drayman_docs=self.webpackChunk_drayman_docs||[]).push([[182],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5378:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={title:"Handling events",sidebar_position:2},l=void 0,c={unversionedId:"components-in-depth/handling-events",id:"components-in-depth/handling-events",isDocsHomePage:!1,title:"Handling events",description:"Each element attribute which starts with an on prefix is considered by Drayman as an event. All events are fired in browser and then executed server-side (if you want to execute something insde browser, you can use Browser object).",source:"@site/docs/components-in-depth/handling-events.mdx",sourceDirName:"components-in-depth",slug:"/components-in-depth/handling-events",permalink:"/docs/components-in-depth/handling-events",editUrl:"https://github.com/Claviz/drayman/blob/main/docs/docs/components-in-depth/handling-events.mdx",version:"current",sidebarPosition:2,frontMatter:{title:"Handling events",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Component lifecycle",permalink:"/docs/components-in-depth/lifecycle"},next:{title:"Introduction",permalink:"/docs/components-in-depth/helpers/introduction"}},p=[{value:"Basic event usage",id:"basic-event-usage",children:[{value:"Generic data",id:"generic-data",children:[]},{value:"Data for keyboard events",id:"data-for-keyboard-events",children:[]},{value:"Data for mouse events",id:"data-for-mouse-events",children:[]},{value:"Data for <code>oninput</code>, <code>onchange</code> events",id:"data-for-oninput-onchange-events",children:[]},{value:"Data for Drayman component events",id:"data-for-drayman-component-events",children:[]},{value:"Data for third-party Drayman component elements",id:"data-for-third-party-drayman-component-elements",children:[]}]},{value:"Configuring events",id:"configuring-events",children:[{value:"Event configuration options",id:"event-configuration-options",children:[]}]}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Each element attribute which starts with an ",(0,o.kt)("inlineCode",{parentName:"p"},"on")," prefix is considered by Drayman as an event. All events are fired in browser and then executed server-side (if you want to execute something insde browser, you can use ",(0,o.kt)("a",{parentName:"p",href:"./helpers/the-browser-object"},"Browser object"),")."),(0,o.kt)("h2",{id:"basic-event-usage"},"Basic event usage"),(0,o.kt)("p",null,"You can use any known ",(0,o.kt)("a",{parentName:"p",href:"https://html.spec.whatwg.org/multipage/indices.html#attributes-3"},"HTML element event")," when developing Drayman components. Simply add required event as an attribute and assign an ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," function which will be executed when event is fired:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},"export const component: DraymanComponent = async ({ forceUpdate }) => {\n  let text: string;\n\n  return () => {\n    return (\n      <>\n        <input\n          //highlight-start\n          oninput={async ({ value }) => {\n            text = value;\n            await forceUpdate();\n          }}\n          //highlight-end\n        />\n        <h3>{text}</h3>\n      </>\n    );\n  };\n};\n")),(0,o.kt)("p",null,"Some events provide useful data when it is fired. In example above, ",(0,o.kt)("inlineCode",{parentName:"p"},"oninput")," event provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," which is a user-typed text. You can find full list of emitted data below."),(0,o.kt)("h3",{id:"generic-data"},"Generic data"),(0,o.kt)("p",null,"All ",(0,o.kt)("a",{parentName:"p",href:"#configuring-events"},"configured events")," emit this data in addition to event-specific data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"trailing, leading\n")),(0,o.kt)("h3",{id:"data-for-keyboard-events"},"Data for keyboard events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"altKey, shiftKey, ctrlKey, metaKey, code, key, location, repeat\n")),(0,o.kt)("h3",{id:"data-for-mouse-events"},"Data for mouse events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"altKey, shiftKey, ctrlKey, metaKey, x, y, pageX, pageY, screenX, screenY, offsetX, offsetY\n")),(0,o.kt)("h3",{id:"data-for-oninput-onchange-events"},"Data for ",(0,o.kt)("inlineCode",{parentName:"h3"},"oninput"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"onchange")," events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"value\n")),(0,o.kt)("h3",{id:"data-for-drayman-component-events"},"Data for Drayman component events"),(0,o.kt)("p",null,"Component events are simple props which name starts with an ",(0,o.kt)("inlineCode",{parentName:"p"},"on")," prefix. Because components and props (events) are created by you, you can pass any data you want. You can read ",(0,o.kt)("a",{parentName:"p",href:"./helpers/props"},"here")," how to work with component props."),(0,o.kt)("h3",{id:"data-for-third-party-drayman-component-elements"},"Data for third-party Drayman component elements"),(0,o.kt)("p",null,"Please refer to specific third-party element documentation to check which data is emitted."),(0,o.kt)("h2",{id:"configuring-events"},"Configuring events"),(0,o.kt)("p",null,"In addition to function which will be executed on event, you can pass some configuration. Lets modify our previous example a bit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},"export const component: DraymanComponent = async ({ forceUpdate }) => {\n  let text: string;\n\n  return () => {\n    return (\n      <>\n        <input\n          //highlight-start\n          oninput={[\n            async ({ value, trailing }) => {\n              text = value;\n              await forceUpdate();\n            },\n            { debounce: { wait: 500, trailing: true } },\n          ]}\n          //highlight-end\n        />\n        <h3>{text}</h3>\n      </>\n    );\n  };\n};\n")),(0,o.kt)("p",null,"Now we pass an array to ",(0,o.kt)("inlineCode",{parentName:"p"},"oninput")," event. First element of this array is a function which needs to be executed on event. Second element - event configuration. In our case we tell to debounce our event for 500ms and execute a function on a trailing edge. In addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," data, our event also receives ",(0,o.kt)("inlineCode",{parentName:"p"},"trailing")," indicator, which will be ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," because function was executed on a trailing edge."),(0,o.kt)("p",null,"You can use a shorthand for this configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},"export const component: DraymanComponent = async ({ forceUpdate }) => {\n  let text: string;\n\n  return () => {\n    return (\n      <>\n        <input\n          oninput={[\n            async ({ value, trailing }) => {\n              text = value;\n              await forceUpdate();\n            },\n            //highlight-next-line\n            { debounce: 500 },\n          ]}\n        />\n        <h3>{text}</h3>\n      </>\n    );\n  };\n};\n")),(0,o.kt)("p",null,"It is also possible to configure element events globally using ",(0,o.kt)("a",{parentName:"p",href:"../introduction/configuration#elementoptions"},"elementOptions")),(0,o.kt)("h3",{id:"event-configuration-options"},"Event configuration options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"debounce - ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"object"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"wait - ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," - number of ms to delay;"),(0,o.kt)("li",{parentName:"ul"},"trailing - ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")," - invokes function on the trailing edge;"),(0,o.kt)("li",{parentName:"ul"},"leading - ",(0,o.kt)("inlineCode",{parentName:"li"},"boolean")," - invokes function on the leading edge.")))))}d.isMDXComponent=!0}}]);