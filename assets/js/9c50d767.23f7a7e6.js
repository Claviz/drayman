"use strict";(self.webpackChunk_drayman_docs=self.webpackChunk_drayman_docs||[]).push([[427],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1320:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={slug:"getting-started-with-drayman",title:"Getting started with Drayman",author:"Yan Ivan Evdokimov",author_url:"https://github.com/jansivans",author_image_url:"https://avatars.githubusercontent.com/u/5667073?v=4",tags:["drayman","node","typescript","javascript","jsx","guide"]},s=void 0,c={permalink:"/blog/getting-started-with-drayman",editUrl:"https://github.com/Claviz/drayman/blob/main/blog/blog/2021-08-17-getting-started-with-drayman.mdx",source:"@site/blog/2021-08-17-getting-started-with-drayman.mdx",title:"Getting started with Drayman",description:"Drayman is a server-side component framework which allows you to use any available HTML element, web component or custom Drayman third-party component together with server-side code in single script.",date:"2021-08-17T00:00:00.000Z",formattedDate:"August 17, 2021",tags:[{label:"drayman",permalink:"/blog/tags/drayman"},{label:"node",permalink:"/blog/tags/node"},{label:"typescript",permalink:"/blog/tags/typescript"},{label:"javascript",permalink:"/blog/tags/javascript"},{label:"jsx",permalink:"/blog/tags/jsx"},{label:"guide",permalink:"/blog/tags/guide"}],readingTime:3.435,truncated:!1},p=[{value:"File viewer component",id:"file-viewer-component",children:[{value:"Initial component template",id:"initial-component-template",children:[]},{value:"Filling select with options",id:"filling-select-with-options",children:[]},{value:"Reacting to user actions",id:"reacting-to-user-actions",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],m={toc:p};function d(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Drayman is a server-side component framework which allows you to use any available HTML element, web component or custom Drayman third-party component together with server-side code in single script."),(0,r.kt)("p",null,"With Drayman, browser only renders what user should see - all logic and calculations happen server-side and UI is written using JSX syntax."),(0,r.kt)("p",null,"Best way to show Drayman capabilities is to create something with it. So let's get started."),(0,r.kt)("h2",{id:"file-viewer-component"},"File viewer component"),(0,r.kt)("p",null,"Let's build a component which allows user to select a file from file system and view it's contents."),(0,r.kt)("p",null,"First, you need to install a Drayman. It can be done by running these commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx @drayman/framework-init@latest my-app\ncd my-app\nnpm start\n")),(0,r.kt)("p",null,"Website will be available at http://localhost:3033."),(0,r.kt)("p",null,"If you don't want install anything, you can always try Drayman inside a CodeSandbox by visiting ",(0,r.kt)("a",{parentName:"p",href:"http://new.drayman.io"},"new.drayman.io"),"."),(0,r.kt)("h3",{id:"initial-component-template"},"Initial component template"),(0,r.kt)("p",null,"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/home.tsx")," and replace it's contents with this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},"export const component: DraymanComponent = async () => {\n  return async () => {\n    return (\n      <>\n        <p>Select a file to view it directly from file system</p>\n        <select></select>\n        <br />\n        <pre></pre>\n      </>\n    );\n  };\n};\n")),(0,r.kt)("p",null,"You will see an initial skeleton of our component. Further ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," will be used to show available files and ",(0,r.kt)("inlineCode",{parentName:"p"},"<pre>")," will show contents of the selected file."),(0,r.kt)("h3",{id:"filling-select-with-options"},"Filling select with options"),(0,r.kt)("p",null,"Because Drayman runs a component server-side, we can use any Node.js library. In our case we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"fs")," module."),(0,r.kt)("p",null,"Let's read file names from project root directory and fill ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," options with them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},'import { promises as fs } from "fs";\n\nexport const component: DraymanComponent = async () => {\n  //highlight-next-line\n  const files = (await fs.readdir("./")).filter((x) => x.includes("."));\n\n  return async () => {\n    return (\n      <>\n        <p>Select a file to view it directly from file system</p>\n        //highlight-start\n        <select>\n          {files.map((fileName) => (\n            <option>{fileName}</option>\n          ))}\n        </select>\n        //highlight-end\n        <br />\n        <pre></pre>\n      </>\n    );\n  };\n};\n')),(0,r.kt)("p",null,"Right now our component is only showing some elements without any interactivity. Our next step will be to add it."),(0,r.kt)("h3",{id:"reacting-to-user-actions"},"Reacting to user actions"),(0,r.kt)("p",null,"We need to remember which file user has selected to show it's contents. It can be done by using ",(0,r.kt)("inlineCode",{parentName:"p"},"onchange")," event attribute and attaching a function which will be ",(0,r.kt)("a",{parentName:"p",href:"http://www.drayman.io/docs/components-in-depth/handling-events"},"executed server-side"),". We also need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," attribute to each ",(0,r.kt)("inlineCode",{parentName:"p"},"option")," so ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," would know which option was selected."),(0,r.kt)("p",null,"Let's also add ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile")," function inside ",(0,r.kt)("inlineCode",{parentName:"p"},"<pre>")," tag so Drayman would read file contents during re-render. We won't show ",(0,r.kt)("inlineCode",{parentName:"p"},"pre")," until file is actually selected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},'import { promises as fs } from "fs";\n\nexport const component: DraymanComponent = async () => {\n  const files = (await fs.readdir("./")).filter((x) => x.includes("."));\n  //highlight-next-line\n  let selectedFile;\n\n  return async () => {\n    return (\n      <>\n        <p>Select a file to view it directly from file system</p>\n        <select\n          //highlight-start\n          onchange={async ({ value }) => {\n            selectedFile = value;\n          }}\n          //highlight-end\n        >\n          {files.map((fileName) => (\n            //highlight-next-line\n            <option value={fileName}>{fileName}</option>\n          ))}\n        </select>\n        <br />\n        //highlight-next-line\n        {selectedFile && <pre>{await fs.readFile(selectedFile, "utf-8")}</pre>}\n      </>\n    );\n  };\n};\n')),(0,r.kt)("p",null,"If you make a selection from dropdown, you will see that nothing happens on page - file contents doesn't appear. That is because with Drayman you must strictly tell when a component needs to be re-rendered. It can be done by using a special ",(0,r.kt)("a",{parentName:"p",href:"http://www.drayman.io/docs/components-in-depth/helpers/introduction"},"helper function")," ",(0,r.kt)("inlineCode",{parentName:"p"},"forceUpdate"),"."),(0,r.kt)("p",null,"Import it and add to ",(0,r.kt)("inlineCode",{parentName:"p"},"onchange")," event after selected file was saved:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},'import { promises as fs } from "fs";\n\nexport const component: DraymanComponent = async ({\n  //highlight-next-line\n  forceUpdate,\n}) => {\n  const files = (await fs.readdir("./")).filter((x) => x.includes("."));\n  let selectedFile;\n\n  return async () => {\n    return (\n      <>\n        <p>Select a file to view it directly from file system</p>\n        <select\n          onchange={async ({ value }) => {\n            selectedFile = value;\n            //highlight-next-line\n            await forceUpdate();\n          }}\n        >\n          {files.map((fileName) => (\n            <option value={fileName}>{fileName}</option>\n          ))}\n        </select>\n        <br />\n        {selectedFile && <pre>{await fs.readFile(selectedFile, "utf-8")}</pre>}\n      </>\n    );\n  };\n};\n')),(0,r.kt)("p",null,"Now our component is complete and file contents is shown on select:\n",(0,r.kt)("img",{alt:"final-result",src:n(297).Z})),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"We have built a component which combines server-side logic and client-side view in a single script."),(0,r.kt)("p",null,"If this felt interesting to you, visit ",(0,r.kt)("a",{parentName:"p",href:"http://www.drayman.io/"},"official docs")," to deep dive into a Drayman framework!"))}d.isMDXComponent=!0},297:function(e,t,n){t.Z=n.p+"assets/images/blog-getting-started-final-result-12a50e5524325e09278972f54251eae1.gif"}}]);