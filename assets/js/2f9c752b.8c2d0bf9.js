"use strict";(self.webpackChunk_drayman_docs=self.webpackChunk_drayman_docs||[]).push([[933],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(h,a(a({ref:n},p),{},{components:t})):o.createElement(h,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8322:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],c={title:"The EventHub object",sidebar_position:5},l=void 0,s={unversionedId:"components-in-depth/helpers/the-event-hub-object",id:"components-in-depth/helpers/the-event-hub-object",isDocsHomePage:!1,title:"The EventHub object",description:"The EventHub object can be used to create a real-time communication between components.",source:"@site/docs/components-in-depth/helpers/the-event-hub-object.mdx",sourceDirName:"components-in-depth/helpers",slug:"/components-in-depth/helpers/the-event-hub-object",permalink:"/docs/components-in-depth/helpers/the-event-hub-object",editUrl:"https://github.com/Claviz/drayman/blob/main/docs/docs/components-in-depth/helpers/the-event-hub-object.mdx",version:"current",sidebarPosition:5,frontMatter:{title:"The EventHub object",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"The Browser object",permalink:"/docs/components-in-depth/helpers/the-browser-object"}},p=[{value:"EventHub methods",id:"eventhub-methods",children:[{value:"<code>emit(eventName, data, groupId?)</code>",id:"emiteventname-data-groupid",children:[]},{value:"<code>on(eventName, callback, groupId)</code>",id:"oneventname-callback-groupid",children:[]}]},{value:"Building a component with real-time communication",id:"building-a-component-with-real-time-communication",children:[]}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The EventHub object can be used to create a real-time communication between components."),(0,i.kt)("h2",{id:"eventhub-methods"},"EventHub methods"),(0,i.kt)("h3",{id:"emiteventname-data-groupid"},(0,i.kt)("inlineCode",{parentName:"h3"},"emit(eventName, data, groupId?)")),(0,i.kt)("p",null,"Emits an event."),(0,i.kt)("h4",{id:"eventname"},(0,i.kt)("inlineCode",{parentName:"h4"},"eventName")),(0,i.kt)("p",null,"Name of the event."),(0,i.kt)("h4",{id:"data"},(0,i.kt)("inlineCode",{parentName:"h4"},"data")),(0,i.kt)("p",null,"Data of the event."),(0,i.kt)("h4",{id:"groupid"},(0,i.kt)("inlineCode",{parentName:"h4"},"groupId")),(0,i.kt)("p",null,"Determines to which group an event will be sent."),(0,i.kt)("h3",{id:"oneventname-callback-groupid"},(0,i.kt)("inlineCode",{parentName:"h3"},"on(eventName, callback, groupId)")),(0,i.kt)("p",null,"Listens to specific event and when event is received, calls ",(0,i.kt)("inlineCode",{parentName:"p"},"callback")," function."),(0,i.kt)("h4",{id:"eventname-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"eventName")),(0,i.kt)("p",null,"Name of the event."),(0,i.kt)("h4",{id:"data-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"data")),(0,i.kt)("p",null,"Callback function which will be executed when specified event is received."),(0,i.kt)("h4",{id:"groupid-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"groupId")),(0,i.kt)("p",null,"Receive event only for specific group."),(0,i.kt)("h4",{id:""}),(0,i.kt)("h2",{id:"building-a-component-with-real-time-communication"},"Building a component with real-time communication"),(0,i.kt)("p",null,"Let's build simplest possible chat implementation. If you open this component in two different windows, input some text and send it, this text also will be shown in second window and vice versa:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/home.tsx"',title:'"src/components/home.tsx"'},'export const component: DraymanComponent = async ({\n  forceUpdate,\n  //highlight-next-line\n  EventHub,\n}) => {\n  let messages = [];\n  let message: string;\n\n  //highlight-start\n  EventHub.on("message", async ({ text }) => {\n    messages.push(text);\n    await forceUpdate();\n  });\n  //highlight-end\n\n  return () => {\n    return (\n      <>\n        <input\n          value={message}\n          oninput={async ({ value }) => {\n            message = value;\n            await forceUpdate();\n          }}\n        />\n        <button\n          onclick={async () => {\n            //highlight-start\n            await EventHub.emit("message", {\n              text: `${new Date().toISOString()}: ${message}`,\n            });\n            //highlight-end\n            message = null;\n            await forceUpdate();\n          }}\n          disabled={!message}\n        >\n          Send message\n        </button>\n        <ul>\n          {messages.map((x) => (\n            <li>{x}</li>\n          ))}\n        </ul>\n      </>\n    );\n  };\n};\n')))}d.isMDXComponent=!0}}]);